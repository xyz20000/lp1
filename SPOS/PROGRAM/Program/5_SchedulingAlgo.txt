
//Process.java
import java.util.Comparator;

public class Process {
String name;
int BT,WT,AT,CT,TAT,remBT,priority;
boolean flag;
public Process(String name,int burst,int AT)
{
	this.name=name;
	BT=burst;
	this.AT=AT;
	WT=CT=TAT=0;
	remBT=BT;
	priority=0;
}
public Process(String name,int burst,int AT,int PR)
{
	this.name=name;
	BT=burst;
	this.AT=AT;
	WT=CT=TAT=0;
	remBT=BT;
	priority=PR;
	flag=false;
}
public void display()
{
	System.out.println(name+"\t"+BT+"\t"+AT+"\t"+CT+"\t"+TAT+"\t"+WT+"\t"+priority);
}
}

//Class for sorting Processes
class SortByArrival implements Comparator<Process>
{

	@Override
	public int compare(Process p1, Process p2) {
		
		return p1.AT-p2.AT;
	}
	
}

class SortByPriority implements Comparator<Process>
{

	@Override
	public int compare(Process o1, Process o2) {
		
		return o1.priority-o2.priority;
	}
	
}



//FCFS.java

import java.util.Arrays;
import java.util.Scanner;

public class FCFS {

	private Scanner sc;

	public void  execute()
	{
		sc = new Scanner(System.in);

		//--------FCFS
		System.out.println("Enter Number of Processes:");
		int numProcess=sc.nextInt();
		Process []process=new Process[numProcess];

		//Accept Input
		for(int i=0;i<numProcess;i++)
		{
			System.out.println("P("+(i+1)+"):Enter Arrival time & Burst time");
			int at=sc.nextInt();
			int bt=sc.nextInt();
			//System.out.println("P("+(i+1)+"):Enter Arrival time");

			process[i]=new Process("P"+(i+1), bt, at);
		}

		//Sorting processes according to Arrival Time //No need if you take AT=0 or in ascending order
		Arrays.sort(process,new SortByArrival());

		int sum=0;
		double TotalWT=0,TotalTAT=0,avgWT=0,avgTAT=0;
		System.out.println("\n\nPRNo\tBT\tAT\tCT\tTAT\tWT");
		System.out.println("============================================================================================");
		for(int i=0;i<numProcess;i++)
		{
			sum=process[i].CT=sum+process[i].BT; //process 1 CT= sum=0+24=24+3=27
			process[i].TAT=process[i].CT-process[i].AT;//process 1TAT=27-0=27
			process[i].WT=process[i].TAT-process[i].BT;//Process 1 WT=27-3=24

			TotalWT=TotalWT+process[i].WT;
			TotalTAT=TotalTAT+process[i].TAT;

			process[i].display();
		}
		avgTAT=(double)TotalTAT/numProcess;
		avgWT=(double)TotalWT/numProcess;
		System.out.println("Average Waiting Time"+avgWT);
		System.out.println("Average TAT="+avgTAT);
	}

}




//PriorityNonPreemptive.java

import java.util.Arrays;
import java.util.Scanner;

public class PriorityNonPreemptive {
	private Scanner sc;

	public void  execute()
	{
		sc = new Scanner(System.in);

		//--------FCFS
		System.out.println("Enter Number of Processes:");
		int numProcess=sc.nextInt();
		Process []process=new Process[numProcess];

		//Accept Input
		for(int i=0;i<numProcess;i++)
		{
			System.out.println("P("+(i+1)+"):Enter  Burst time  & priority"); //
			int at=0;//sc.nextInt();
			//Note: Arrival time is 0 for all processes;
			int bt=sc.nextInt();
			int priority=sc.nextInt();
			//System.out.println("P("+(i+1)+"):Enter Arrival time");

			process[i]=new Process("P"+(i+1), bt, at,priority);
		}
		//Sorting processes according to Arrival Time //No need if you take AT=0 or in ascending order
				Arrays.sort(process,new SortByPriority());

				int sum=0;
				double TotalWT=0, TotalTAT=0,avgWT=0,avgTAT=0;
				System.out.println("\n\nPRNo\tBT\tAT\tCT\tTAT\tWT\tPR");
				System.out.println("============================================================================================");
				for(int i=0;i<numProcess;i++)
				{
					sum=process[i].CT=sum+process[i].BT;
					process[i].TAT=process[i].CT-process[i].AT;
					process[i].WT=process[i].TAT-process[i].BT;

					TotalWT=TotalWT+process[i].WT;
					TotalTAT=TotalTAT+process[i].TAT;

					process[i].display();
				}
		
		
		avgTAT=(double)TotalTAT/numProcess;
		avgWT=(double)TotalWT/numProcess;
		System.out.println("Average Waiting Time"+avgWT);
		System.out.println("Average TAT="+avgTAT);
	}
}

//RoundRobin.java

import java.util.Arrays;
import java.util.Scanner;

public class RoundRobin {
	private Scanner sc;
	public void execute()
	{
		sc = new Scanner(System.in);

		//--------FCFS
		System.out.println("Enter Number of Processes:");
		int numProcess=sc.nextInt();
		Process []process=new Process[numProcess];

		//Accept Input
		for(int i=0;i<numProcess;i++)
		{
			System.out.println("P("+(i+1)+"):Enter Arrival time & Burst time");
			int at=sc.nextInt();
			int bt=sc.nextInt();
			//System.out.println("P("+(i+1)+"):Enter Arrival time");

			process[i]=new Process("P"+(i+1), bt, at);
		}
		Arrays.sort(process,new SortByArrival()); //sort according to arrival time

		System.out.println("Enter Quantum Time: ");
		int quantum=sc.nextInt();
		
		double TotalWT=0, TotalTAT=0,avgWT=0,avgTAT=0;
		int time=0;
		System.out.println("\n\nPRNo\tBT\tAT\tCT\tTAT\tWT\tPR");
		System.out.println("============================================================================================");
		while(true) //upto all process completion
		{
			boolean done=true;
			for(int i=0;i<numProcess;i++)
			{
				if(process[i].remBT>0 && process[i].AT<=time)
				{
					done=false;
					
					if(process[i].remBT>quantum) // time remaining :v 2>4
					{
						time=time+quantum;  //0+4=4
						process[i].remBT=process[i].remBT-quantum; //procee[i].rembt=6-4=2
						System.out.println(i+" TIME "+time);
						
					}
					else //process will finish execution
					{
						
						time+=process[i].remBT; //4+2=6
						System.out.println(i+" TIME "+time);

						process[i].remBT=0;
						process[i].CT=time;//6
						process[i].TAT=process[i].CT-process[i].AT;
						process[i].WT=process[i].TAT-process[i].BT;
						TotalWT=TotalWT+process[i].WT;
						TotalTAT=TotalTAT+process[i].TAT;
						process[i].display();
					}
				}
				/*else //no process is arrived currently
				{
					time++;
					
				}*/
				
			}
			if(done==true) //done executing all processes
			{
				break;
			}

		}


	}

}


//SJF.java

import java.util.Arrays;
import java.util.Scanner;

import javax.swing.text.html.MinimalHTMLWriter;

public class SJF {
	private Scanner sc;

	public void  execute()
	{
		sc = new Scanner(System.in);

		//--------FCFS
		System.out.println("Enter Number of Processes:");
		int numProcess=sc.nextInt();
		Process []process=new Process[numProcess];

		//Accept Input
		for(int i=0;i<numProcess;i++)
		{
			System.out.println("P("+(i+1)+"):Enter Arrival time & Burst time");
			int at=sc.nextInt();
			int bt=sc.nextInt();
			//System.out.println("P("+(i+1)+"):Enter Arrival time");

			process[i]=new Process("P"+(i+1), bt, at);
		}

		int min=Integer.MAX_VALUE;
		int count=0,shortest=0;
		int time=0;
		int sum=0;
		double TotalWT=0, TotalTAT=0,avgWT=0,avgTAT=0;
		boolean check=false;
		System.out.println("\n\nPRNo\tBT\tAT\tCT\tTAT\tWT");
		System.out.println("============================================================================================");
		while(count<numProcess)
		{
		    //	check=false;//remove this if given wrong i=output
			//find shortest process till time
			for(int i=0;i<numProcess;i++)
			{
				
				if(process[i].AT<=time &&(process[i].remBT<min && process[i].remBT>0))
				{
					shortest=i; //3
					min=process[i].remBT;
					check=true;
				}
			}
				if(check==false) //No process is present currently
				{
					time++;
					continue;
				}
				process[shortest].remBT--; //1=1-1=0scheduled shortest process for one unit time
				min=process[shortest].remBT; //0
				
				if(min==0) //process completes its execution
				{
					min=Integer.MAX_VALUE;
					count++;
					sum=time+1;
					process[shortest].CT=sum;
					process[shortest].TAT=process[shortest].CT-process[shortest].AT;
					process[shortest].WT=process[shortest].TAT-process[shortest].BT;
					//if(process[shortest].WT<0)
					//	process[shortest].WT=0; 
					TotalWT=TotalWT+process[shortest].WT;
					TotalTAT=TotalTAT+process[shortest].TAT;

					process[shortest].display();
				}
				time++;
				
			
		}
		
		avgTAT=(double)TotalTAT/numProcess;
		avgWT=(double)TotalWT/numProcess;
		System.out.println("Average Waiting Time"+avgWT);
		System.out.println("Average TAT="+avgTAT);
	}
}


//Scheduling.java


public class Scheduling {

	public static void main(String[] args) {

	FCFS fcfs=new FCFS();
	fcfs.execute();
	SJF sjf=new SJF();
	//sjf.execute();
	
	PriorityNonPreemptive pr=new PriorityNonPreemptive();
	//pr.execute();
	
	RoundRobin rr=new RoundRobin();
	//rr.execute();
	
	}

}
